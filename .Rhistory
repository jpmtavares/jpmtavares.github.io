theme(legend.position="none",
strip.background = element_rect(fill = "tan1"),
strip.text.x = element_text(size = 16, colour = "white", face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 16),
title = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
###########################################################################
#                                                                         #
#                         war&peace - shinyapp                            #
#                                                                         #
###########################################################################
library(shiny)
library(gutenbergr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
#_______________________________________________________
# filter gutenberg by Tolstoy
#_______________________________________________________
tolstoy<-gutenberg_works(str_detect(author, "Tolstoy"))
#_______________________________________________________
# get War and Peace with books, chapters and page numbers
#_______________________________________________________
warpeace<-gutenberg_download(2600) %>%
mutate(book = cumsum(str_detect(text, regex("^book .*:",
ignore_case = TRUE))),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE))),
linenumber = row_number())
#_______________________________________________________
# get useful words
#_______________________________________________________
data(stop_words)
words <- warpeace %>%
unnest_tokens(word, text) %>%
mutate(word = str_replace(word, "\\’", "\\'")) %>%
anti_join(stop_words) %>% #stop words are words that are not useful for analysis, typically extremely common words
mutate(word = str_replace(word, "\\'s", "")) %>%
filter(book != 0)
sentiments <- get_sentiments("nrc") %>%
select(sentiment) %>%
arrange(sentiment) %>%
unique %>%
mutate(color = c('#ea6767', '#ffaacc', '#c8b7be', '#575761', '#fce376', 'tan1',
'#5fd3bc', 'slategray2', '#6671a3', '#afafe9'))
ui <- fluidPage(titlePanel("War&Peace - sentiment analysis"),
sidebarPanel(
selectInput(
inputId = "book", label = "Choose book number:", choices = c("-- All books --", paste("Book", unique(words$book), sep=" "))
),
#extra vertical space
br(),
checkboxGroupInput(
inputId = "sentiment", label = "Select sentiment:",
choices = sentiments$sentiment, selected = sentiments$sentiment
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("By book",
plotOutput(
outputId="sentiment_book"
)
),
tabPanel("By chapter",
verbatimTextOutput(outputId = "test"))
)
)
)
server <- function(input, output){
output$sentiment_book <- renderPlot({
if(grepl("\\-", input$sentiment)){
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-"Overview"
}else{
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(book == str_extract(input$book, "[0-9].*")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-input$book
}
#_______________________________________________________
# ggplot
#_______________________________________________________
ggplot(sentiment, aes(sentiment, n, fill = sentiment)) +
geom_bar(stat="identity") +
scale_fill_manual(values=sentiments %>%
filter(sentiment %in% input$sentiment) %>%
select(color) %>%
pull) +
ggtitle(paste("\n", plot_title, "\n", sep="")) +
ylab("number of words") +
theme(legend.position="none",
strip.background = element_rect(fill = "tan1"),
strip.text.x = element_text(size = 16, colour = "white", face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 16),
title = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
###########################################################################
#                                                                         #
#                         war&peace - shinyapp                            #
#                                                                         #
###########################################################################
library(shiny)
library(gutenbergr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
#_______________________________________________________
# filter gutenberg by Tolstoy
#_______________________________________________________
tolstoy<-gutenberg_works(str_detect(author, "Tolstoy"))
#_______________________________________________________
# get War and Peace with books, chapters and page numbers
#_______________________________________________________
warpeace<-gutenberg_download(2600) %>%
mutate(book = cumsum(str_detect(text, regex("^book .*:",
ignore_case = TRUE))),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE))),
linenumber = row_number())
#_______________________________________________________
# get useful words
#_______________________________________________________
data(stop_words)
words <- warpeace %>%
unnest_tokens(word, text) %>%
mutate(word = str_replace(word, "\\’", "\\'")) %>%
anti_join(stop_words) %>% #stop words are words that are not useful for analysis, typically extremely common words
mutate(word = str_replace(word, "\\'s", "")) %>%
filter(book != 0)
sentiments <- get_sentiments("nrc") %>%
select(sentiment) %>%
arrange(sentiment) %>%
unique %>%
mutate(color = c('#ea6767', '#ffaacc', '#c8b7be', '#575761', '#fce376', 'tan1',
'#5fd3bc', 'slategray2', '#6671a3', '#afafe9'))
ui <- fluidPage(titlePanel("War&Peace - sentiment analysis"),
sidebarPanel(
selectInput(
inputId = "book", label = "Choose book number:", choices = c("-- All books --", paste("Book", unique(words$book), sep=" "))
),
#extra vertical space
br(),
checkboxGroupInput(
inputId = "sentiment", label = "Select sentiment:",
choices = sentiments$sentiment, selected = sentiments$sentiment
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("By book",
plotOutput(
outputId="sentiment_book"
)
),
tabPanel("By chapter",
verbatimTextOutput(outputId = "test"))
)
)
)
server <- function(input, output){
output$sentiment_book <- renderPlot({
if(grepl("\\-", input$book)){
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-"Overview"
}else{
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(book == str_extract(input$book, "[0-9].*")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-input$book
}
#_______________________________________________________
# ggplot
#_______________________________________________________
ggplot(sentiment, aes(sentiment, n, fill = sentiment)) +
geom_bar(stat="identity") +
scale_fill_manual(values=sentiments %>%
filter(sentiment %in% input$sentiment) %>%
select(color) %>%
pull) +
ggtitle(paste("\n", plot_title, "\n", sep="")) +
ylab("number of words") +
theme(legend.position="none",
strip.background = element_rect(fill = "tan1"),
strip.text.x = element_text(size = 16, colour = "white", face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 16),
title = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
###########################################################################
#                                                                         #
#                         war&peace - shinyapp                            #
#                                                                         #
###########################################################################
library(shiny)
library(gutenbergr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
#_______________________________________________________
# filter gutenberg by Tolstoy
#_______________________________________________________
tolstoy<-gutenberg_works(str_detect(author, "Tolstoy"))
#_______________________________________________________
# get War and Peace with books, chapters and page numbers
#_______________________________________________________
warpeace<-gutenberg_download(2600) %>%
mutate(book = cumsum(str_detect(text, regex("^book .*:",
ignore_case = TRUE))),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE))),
linenumber = row_number())
#_______________________________________________________
# get useful words
#_______________________________________________________
data(stop_words)
words <- warpeace %>%
unnest_tokens(word, text) %>%
mutate(word = str_replace(word, "\\’", "\\'")) %>%
anti_join(stop_words) %>% #stop words are words that are not useful for analysis, typically extremely common words
mutate(word = str_replace(word, "\\'s", "")) %>%
filter(book != 0)
sentiments <- get_sentiments("nrc") %>%
select(sentiment) %>%
arrange(sentiment) %>%
unique %>%
mutate(color = c('#ea6767', '#ffaacc', '#c8b7be', '#575761', '#fce376', 'tan1',
'#5fd3bc', 'slategray2', '#6671a3', '#afafe9'))
ui <- fluidPage(titlePanel("War&Peace - sentiment analysis",
#extra vertical space
br()),
sidebarPanel(
selectInput(
inputId = "book", label = "Choose book number:", choices = c("-- All books --", paste("Book", unique(words$book), sep=" "))
),
#extra vertical space
br(),
checkboxGroupInput(
inputId = "sentiment", label = "Select sentiment:",
choices = sentiments$sentiment, selected = sentiments$sentiment
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("By book",
plotOutput(
outputId="sentiment_book"
)
),
tabPanel("By chapter",
verbatimTextOutput(outputId = "test"))
)
)
)
server <- function(input, output){
output$sentiment_book <- renderPlot({
if(grepl("\\-", input$book)){
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-"Overview"
}else{
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(book == str_extract(input$book, "[0-9].*")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-input$book
}
#_______________________________________________________
# ggplot
#_______________________________________________________
ggplot(sentiment, aes(sentiment, n, fill = sentiment)) +
geom_bar(stat="identity") +
scale_fill_manual(values=sentiments %>%
filter(sentiment %in% input$sentiment) %>%
select(color) %>%
pull) +
ggtitle(paste("\n", plot_title, "\n", sep="")) +
ylab("number of words") +
theme(legend.position="none",
strip.background = element_rect(fill = "tan1"),
strip.text.x = element_text(size = 16, colour = "white", face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 16),
title = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
###########################################################################
#                                                                         #
#                         war&peace - shinyapp                            #
#                                                                         #
###########################################################################
library(shiny)
library(gutenbergr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
#_______________________________________________________
# filter gutenberg by Tolstoy
#_______________________________________________________
tolstoy<-gutenberg_works(str_detect(author, "Tolstoy"))
#_______________________________________________________
# get War and Peace with books, chapters and page numbers
#_______________________________________________________
warpeace<-gutenberg_download(2600) %>%
mutate(book = cumsum(str_detect(text, regex("^book .*:",
ignore_case = TRUE))),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE))),
linenumber = row_number())
#_______________________________________________________
# get useful words
#_______________________________________________________
data(stop_words)
words <- warpeace %>%
unnest_tokens(word, text) %>%
mutate(word = str_replace(word, "\\’", "\\'")) %>%
anti_join(stop_words) %>% #stop words are words that are not useful for analysis, typically extremely common words
mutate(word = str_replace(word, "\\'s", "")) %>%
filter(book != 0)
sentiments <- get_sentiments("nrc") %>%
select(sentiment) %>%
arrange(sentiment) %>%
unique %>%
mutate(color = c('#ea6767', '#ffaacc', '#c8b7be', '#575761', '#fce376', 'tan1',
'#5fd3bc', 'slategray2', '#6671a3', '#afafe9'))
ui <- fluidPage(titlePanel("War&Peace - sentiment analysis"),
#extra vertical space
br(),
sidebarPanel(
selectInput(
inputId = "book", label = "Choose book number:", choices = c("-- All books --", paste("Book", unique(words$book), sep=" "))
),
#extra vertical space
br(),
checkboxGroupInput(
inputId = "sentiment", label = "Select sentiment:",
choices = sentiments$sentiment, selected = sentiments$sentiment
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("By book",
plotOutput(
outputId="sentiment_book"
)
),
tabPanel("By chapter",
verbatimTextOutput(outputId = "test"))
)
)
)
server <- function(input, output){
output$sentiment_book <- renderPlot({
if(grepl("\\-", input$book)){
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-"Overview"
}else{
#sentiment
sentiment <- words %>%
inner_join(get_sentiments("nrc")) %>%
filter(book == str_extract(input$book, "[0-9].*")) %>%
filter(sentiment %in% input$sentiment) %>%
group_by(sentiment) %>%
count
plot_title<-input$book
}
#_______________________________________________________
# ggplot
#_______________________________________________________
ggplot(sentiment, aes(sentiment, n, fill = sentiment)) +
geom_bar(stat="identity") +
scale_fill_manual(values=sentiments %>%
filter(sentiment %in% input$sentiment) %>%
select(color) %>%
pull) +
ggtitle(paste("\n", plot_title, "\n", sep="")) +
ylab("number of words") +
theme(legend.position="none",
strip.background = element_rect(fill = "tan1"),
strip.text.x = element_text(size = 16, colour = "white", face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 16),
title = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
rmarkdown::render_site()
setwd("/media/joanatavares/716533eb-f660-4a61-a679-ef610f66feed/github/jpmtavares.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
devtools::install_github('rstudio/blogdown')
blogdown::serve_site()
setwd()
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
